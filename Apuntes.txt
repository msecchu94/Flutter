USER: info@extrados.com.ar
PASS: ExtraDosE2


SECCION 1 CONFIG.

Programas:

    VSCode

    Git

    Postman

    Android Studio

    Mac OSX - XCode

Plugins:

    Awesome Flutter Snippets

    Bracket Pair Colorizer 2

    Dart

    Flutter

    Material Icon Theme

    Paste JSON as Code

    Terminal

Tema que estoy usando:

    Monokai Night

Configuración del Bracket Pair Colorizer 2:

"bracket-pair-colorizer-2.colors": [
    "#fafafa",
    "#9F51B6",
    "#F7C244",
    "#F07850",
    "#9CDD29",
    "#C497D4"
],

SECCION 2 DART : 

https://dartpad.dartlang.org/
Inyectar variable (+nombre o $nombre)

Numeros: int-double

Boolean y condiciones:

Lista: List

Map: clase abstracta que recibe dos valores EJ. 

 String propiedad = 'soltero';
  
  Map <String,dynamic> persona = {
    
    'nombre':'maxi',
    'edad':30,
    'soltero':true
    
  };
  
 print(persona);
 print(persona['nombre']);
 print(persona['edad']);
 print(persona[propiedad]);

 persona.addAll({'Empleado':false});
 print(persona);

 FUNCIONES:(fuera de la clase) void main (){
  
String mensaje =  saludar(texto:'hola,' , nombre:'maxi');
print(mensaje);
        }

String saludar({String texto,String nombre}){
  
return '$texto $nombre';
    }

Clases: (metodos)
 
 void main() {

//jamas cambiara la prorpiedad(final)
  final volverine = Heroe(nombre:'Logan',poder:'Regeneracion'); 
  print(volverine.toStrin());

}

class Heroe {
  
  String nombre;
  String poder;
 
  Heroe( { String nombre, String poder}){
    this.nombre=nombre;
    this.poder=poder;
    
  }
  
  String toStrin(){
    
    return '${this.nombre} - ${this.poder}';
  }
}

FORMAS CORTAS DE DEFINIR LAS PROPIEDADES

class Heroe {
  
  String nombre;
  String poder;
 
  Heroe( { this.nombre, this.poder}){
    this.nombre=nombre;
    this.poder=poder;
    
  }
  
  String toString()=> 'nombre:$nombre - poder:$poder}';

  CONSTRUCTORES CON NOMBRE : 

  import 'dart:convert';
void main() {

//   final volverine = Heroe('Logan','Regeneracion'); 
  final rowJson='{"nombre":"Logan","poder":"Regeneracion"}';
  
  final parseJson = json.decode(rowJson);
  
  final volverine =new Heroe.fromJson(parseJson);
  
  print(volverine.nombre);
  print(volverine.poder);
}

class Heroe {
  
  String nombre;
  String poder;
 
  Heroe( { this.nombre,this.poder});

  Heroe.fromJson(Map parseJson){
    
    nombre = parseJson['nombre'];
     poder = parseJson['poder'];
  }
}

GETTERS Y SETTERS : 

_props(las hace privadas)

void main(){
  
  final cuadrado = new Cuadrado();
  
  cuadrado.lado=10;
  
  print(cuadrado);
  print ('area:${cuadrado.area}');
  
}



class Cuadrado{
  
  double _lado;
  double _area;
  
  set lado (double valor ){
    
    if(valor <=0){
      
      throw('el lado no puede se menor o igual a 0');
      
    } 
    _lado = valor;
   
  }
  
  double get area => _lado * _lado;
  
  
   toString () => 'Lado:$_lado'; 
}

CLASES ABSTRACTAS : (abstract class name)

EXTEND : de clases

void main() {

  final superman=new Heroe();
  superman.nombre='Clart Kent';
  
  final lutor= new Villano();
  lutor.nombre='Lext Lutor';
}

abstract class Personaje{
  String nombre;
  String poder; 
}

class Heroe extends Personaje{
  
  int valentia;
  }

class Villano extends Personaje{
  
  int maldad;
}

MIXINS : 

void main (){
  
  final pato = new Pato();
  pato.volar();
  
  final tiburon = new Tiburon();
  tiburon.nadar();
  
} 


abstract class Animal {}

abstract class Mamiferos extends Animal{} 

abstract class Aves extends Animal{} 

abstract class Pez extends Animal{} 

abstract class Volador {
  void volar ()=> print( 'estoy volando');
}

abstract class Nadador {
  void nadar ()=> print( 'estoy nadando');
}

abstract class Caminante {
  void caminar ()=> print( 'estoy caminando');
}

class Delfin extends Mamiferos with Nadador { }

class Murcielago extends Mamiferos with Caminante,Volador { }

class Gato extends Mamiferos with Caminante { }

class Paloma extends Aves with Caminante, Volador { }

class Pato extends Aves with Volador,Nadador,Caminante { }

class Tiburon extends Pez with Nadador { }

class PezVolador extends Pez with Nadador,Volador { }


FUTURES : (PROMESAS) ( ver metodos )

void main(){
  
  httpGet('http://api/nasa/aliens').then((data){
          
    print(data);     
          
  });
}
Future <String> httpGet(String Url ){
  
  return Future.delayed(new Duration(seconds:4), () {
        return 'Hola Mundo';
 });
  
}

ASYNC - AWAIT :
void main() async {
  
String data = await httpGet('http://api/nasa/aliens');
          

}
Future <String> httpGet(String Url ){
  
  return Future.delayed(new Duration(seconds:4), () {
        return 'Hola Mundo';
 });
  
}


SECCION 3 instalacion flutter equipos virtuales y locales : 

*Temas puntuales de la sección

*En esta sección tocaremos temas sobre:

    -Instalaciones en Windows

    -Instalaciones en OSX

    -Android Studio

    -XCode (Sólo en OSX)

    -Correr en un Android físico

    -Correr en un iPhone físico (Sólo OSX)

    -Lanzar emuladores desde VSCode

*Esta sección está destinada a las instalaciones propias de Flutter para poder realizar los desarrollos localmente.

CREAR PROYECTO VS CODE : INTRODUCCION A FLUTTER (SECCION 4)

Temas puntuales de la sección

En esta sección tocaremos temas sobre:

    Conceptos fundamentales en Flutter : 

    Widgets: Clase que puede tener argumentos posiciones y argumentos con nombre ( StatelessWidget - StatefullWidget) 

    Árbol de Widgets

    Estructura de un proyecto en Flutter

    Exposición de cada archivo generado automáticamente


    SECCION 5 : 

    En esta sección tocaremos temas sobre:

    Stateless

    Stateful

    Scaffolds: 

    Estilos

    SECCION 6 : Componentes 

    Listviews

    ListTiles

    Listas y map

    Rutas


    
